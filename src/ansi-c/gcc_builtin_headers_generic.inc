"// clang-format off\n"
"// stdarg\n"
"void* __builtin_apply_args();\n"
"void* __builtin_apply(void (*)(), void*, __CPROVER_size_t);\n"
"void __builtin_ms_va_end(void *ap);\n"
"void __builtin_ms_va_start(void *ap, ...);\n"
"void* __builtin_next_arg();\n"
"int __builtin_va_arg_pack();\n"
"int __builtin_va_arg_pack_len();\n"
"void __builtin_va_copy(__builtin_va_list dest, __builtin_va_list src);\n"
"void __builtin_va_end(void *ap);\n"
"void __builtin_va_start(void *ap, ...);\n"
"\n"
"// stdlib\n"
"void __builtin__Exit(int);\n"
"void __builtin__exit(int);\n"
"void __builtin_abort();\n"
"int __builtin_execl(const char*, const char*, ...);\n"
"int __builtin_execle(const char*, const char*, ...);\n"
"int __builtin_execlp(const char*, const char*, ...);\n"
"int __builtin_execv(const char*, const char**);\n"
"int __builtin_execve(const char*, const char**, const char**);\n"
"int __builtin_execvp(const char*, const char**);\n"
"void __builtin_exit(int);\n"
"pid_t __builtin_fork();\n"
"\n"
"// atomics\n"
"void __sync_synchronize();\n"
"_Bool __atomic_test_and_set(void *, int);\n"
"void __atomic_clear(_Bool *, int);\n"
"void __atomic_thread_fence(int);\n"
"void __atomic_signal_fence(int);\n"
"_Bool __atomic_always_lock_free(__CPROVER_size_t, void *);\n"
"_Bool __atomic_is_lock_free(__CPROVER_size_t, void *);\n"
"\n"
"// __SZH_ADD_BEGIN__\n"
"void __atomic_store(void *, void *, int);\n"
"void __atomic_store_n(void *, void *, int);\n"
"void __atomic_load(void *, void *, int);\n"
"void __atomic_load_n(void *, void *, int);\n"
"_Bool __atomic_compare_exchange(int *, int *, int, int, int, int);\n"
"void __atomic_exchange(int *, int *, int *, int);\n"
"int __atomic_fetch_add(int *, int, int);\n"
"int __atomic_fetch_sub(int *, int, int);\n"
"int __atomic_fetch_and(int *, int, int);\n"
"int __atomic_fetch_or(int *, int, int);\n"
"int __atomic_fetch_xor(int *, int, int);\n"
"\n"
"int __LKMM_LOAD(int *, int);\n"
"void __LKMM_STORE(int*, int, int);\n"
"void __LKMM_FENCE(int);\n"
"int __LKMM_XCHG(int*, int, int);\n"
"int __LKMM_CMPXCHG(int*, int, int, int, int);\n"
"void __LKMM_ATOMIC_OP(int*, int, int);\n"
"int __LKMM_ATOMIC_FETCH_OP(int*, int, int, int);\n"
"int __LKMM_ATOMIC_OP_RETURN(int*, int, int, int);\n"
"\n"
"int __LKMM_SPIN_LOCK(spinlock_t*);\n"
"int __LKMM_SPIN_UNLOCK(spinlock_t*);\n"
"// __SZH_ADD_END__\n"
"\n"
"// other\n"
"int __builtin_choose_expr(_Bool, ...);\n"
"int __builtin_classify_type();\n"
"int __builtin_constant_p(int);\n"
"void __builtin_trap(void);\n"
"void __builtin_unreachable(void);\n"
"long __builtin_expect(long, long);\n"
"long __builtin_expect_with_probability(long, long, double);\n"
"void __builtin_clear_padding();\n"
"void __builtin_speculation_safe_value();\n"
"void* __builtin_speculation_safe_value_ptr(void*, ...);\n"
"\n"
"void* __builtin_dwarf_cfa();\n"
"unsigned __builtin_dwarf_sp_column();\n"
"int __builtin_eh_return_data_regno(int);\n"
"void __builtin_init_dwarf_reg_size_table(void*);\n"
"void __builtin_unwind_init();\n"
"\n"
"const char* __builtin_FILE();\n"
"const char* __builtin_FUNCTION();\n"
"int __builtin_LINE();\n"
"\n"
"void __builtin_longjmp(void*, int);\n"
"void __builtin_return(void*);\n"
"void* __builtin_saveregs();\n"
"int __builtin_setjmp(void*);\n"
"void __builtin_update_setjmp_buf(void*);\n"
"// clang-format on\n"
